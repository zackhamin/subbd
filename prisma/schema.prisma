// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  APPLICANT
  RECRUITER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  userType      UserType?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts  Account[]
  sessions  Session[]
  applicant Applicant?
  recruiter Recruiter?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Applicant Profile Models
model Applicant {
  id                String   @id @default(cuid())
  userId            String   @unique
  headline          String?
  bio               String?  @db.Text
  yearsOfExperience Int?     @default(0)
  jobTitle          String?
  location          String?
  resumeUrl         String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user                User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  skills              Skill[]
  education           Education[]
  experience          Experience[]
  applications        JobApplication[]
  followingRecruiters Follow[]         @relation("ApplicantToRecruiterFollow")
}

model Skill {
  id          String    @id @default(cuid())
  name        String
  applicantId String
  applicant   Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)

  @@unique([applicantId, name])
}

model Education {
  id           String    @id @default(cuid())
  institution  String
  degree       String
  fieldOfStudy String
  from         String
  to           String?
  current      Boolean   @default(false)
  applicantId  String
  applicant    Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)
}

model Experience {
  id          String    @id @default(cuid())
  company     String
  position    String
  description String?   @db.Text
  from        DateTime
  to          DateTime?
  current     Boolean   @default(false)
  applicantId String
  applicant   Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)
}

// Recruiter Profile Models
model Recruiter {
  id                 String   @id @default(cuid())
  userId             String   @unique
  companyName        String
  position           String?
  industry           String?
  companySize        String?
  companyDescription String?  @db.Text
  companyWebsite     String?
  companyLocation    String?
  phoneNumber        String?
  logoUrl            String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobListings     JobListing[]
  specializations Specialization[]
  followedBy      Follow[]         @relation("ApplicantToRecruiterFollow")
}

model Specialization {
  id          String    @id @default(cuid())
  name        String
  recruiterId String
  recruiter   Recruiter @relation(fields: [recruiterId], references: [id], onDelete: Cascade)

  @@unique([recruiterId, name])
}

// Job Listings and Applications
model JobListing {
  id           String   @id @default(cuid())
  title        String
  description  String   @db.Text
  requirements String?  @db.Text
  location     String?
  salary       String?
  type         String? // Full-time, Part-time, Contract, etc.
  isRemote     Boolean  @default(false)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  recruiterId  String

  recruiter    Recruiter        @relation(fields: [recruiterId], references: [id], onDelete: Cascade)
  applications JobApplication[]
}

model JobApplication {
  id           String   @id @default(cuid())
  coverLetter  String?  @db.Text
  status       String   @default("pending") // pending, reviewed, interviewed, rejected, accepted
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  applicantId  String
  jobListingId String

  applicant  Applicant  @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  jobListing JobListing @relation(fields: [jobListingId], references: [id], onDelete: Cascade)
}

// Following/Subscription system
model Follow {
  id          String   @id @default(cuid())
  applicantId String
  recruiterId String
  createdAt   DateTime @default(now())

  applicant Applicant @relation("ApplicantToRecruiterFollow", fields: [applicantId], references: [id], onDelete: Cascade)
  recruiter Recruiter @relation("ApplicantToRecruiterFollow", fields: [recruiterId], references: [id], onDelete: Cascade)

  @@unique([applicantId, recruiterId])
}
